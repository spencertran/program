
package com.company;

// ---------*---------*---------*---------*
// The use of static imports is something that should be used carefully.
// I have only ever used this technique for the project wide constants.
//
import static com.company.ProjConstants.*;
public class StDeviation {
    double[] data;
    private static int maxArr = 20;
    private int INVALID = -1;
    private double sum;
    private double mean;
    private int counter = 0;

    private int a[][] = new int [maxArr][maxArr];
    private double nVarianceAray[][] = new double[maxArr][maxArr];


    // ---------*---------*---------*---------*---------*---------*---------*---------*
    // As discussed in class we are using a class populated with Project Constants to
    // ensure help manage the project data. This ensures that each class can access the
    // constant values, but in the event that a change is needed/required that this will
    // only need to be made in one location, or file.
    //
    // Notice: If I had not done the "static import com.company.ProjConstants.*;" then
    //         the use of the constant would have been written as:
    //
    //         private int[] Data = new int[ProjConstants.MAXDATA];
    //
    private int[] Data = new int[MAXDATA];

    // ---------*---------*---------*---------*---------*---------*---------*---------*
    // The following method will take a new data item and add it into the 1 Dimensional
    // Array of data values to be used later.
    //
    // You MUST write this method and I will use it during testing
    //
    public void addNewDataItem(double dataItem){

    }

    // ---------*---------*---------*---------*---------*---------*---------*---------*
    // The following method will return the total number of data items currently stored
    public int getNumberOfDataItems(){
        return counter;
    }

    // ---------*---------*---------*---------*---------*---------*---------*---------*
    // The following method returns a double precision value which is the average of all
    // of the data values
    //
    // You MUST write this method and I will use it during testing
    //
    public double calcAverage(){
        int sum = 0;

            for (int x = 0; x < counter;x++);
                sum+data[x];
        }
            int average =  sum/counter;



        return average;
    }

    // ---------*---------*---------*---------*---------*---------*---------*---------*
    // The following method returns a double precision value which is the Variance of all
    // of the data values
    //
    // You MUST write this method and I will use it during testing
    //
    public double calcVariance(){
        boolean done = false;
                int nCount = 0;
        for (int i = 0; i < maxArr; i++) {
            for (int j = 0; j < maxArr; j++)

                if (a[i][j] != INVALID) {
                    nVarianceAray[i][j] = a[i][j] - mean;
                    nVarianceAray[i][j] *= nVarianceAray[i][j];
                    nCount++;
                } else {
                    done = true;
                    break;
                }
            if (done == true) {
                break;
            }
        }

        int nSumVar =  0;
        done = false;

        for (int i = 0; i < maxArr; i++) {
            for (int j = 0; i < maxArr; j++) {

                if (nVarianceAray[i][j] != 0) {

                    nSumVar += nVarianceAray[i][j];
                } else {

                    done = true;
                    break;
                }

            }

            if (done) {
                nSumVar /= nCount;
                break;
            }
        }


        return nSumVar;
    }


    // ---------*---------*---------*---------*---------*---------*---------*---------*
    // The following method returns a double precision value which is the Standard
    // Deviation of all of the data values
    //
    // You MUST write this method and I will use it during testing
    //
    public double calcStandardDeviation() {
        boolean done = false;
        int nCount = 0;

        for (int i = 0; i < maxArr; i++) {
            for (int j = 0; j < maxArr; j++)


                if (a[i][j] != INVALID) {
                    nVarianceAray[i][j] = a[i][j] - mean;
                    nVarianceAray[i][j] *= nVarianceAray[i][j];
                    nCount++;
                } else {
                    done = true;
                    break;
                }
        }
        if (done == true) {
            break;
        }


    //{
        // return Math.sqrt(calcVariance());
        //}


        return calcStandardDeviation;
    }

}
